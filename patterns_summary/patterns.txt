agility_story: Generates a user story and acceptance criteria for a given topic, providing a clear description of the desired functionality. It follows the Agile framework and utilizes JSON format for output. The output includes the topic, user story, and acceptance criteria, ensuring a comprehensive understanding of the requirement. 
ai: Interprets the essence of a question and provides insightful answers.  Analyzes the question's core and nuances to create a mental model.  Produces concise responses in 3-5 Markdown bullets. 
analyze_answers: Evaluates the correctness of student-provided answers. Considers the student level and adapts the evaluation accordingly. Provides a score and reasoning for each answer based on generated correct answers aligned with the key concepts and learning objectives. 
analyze_cfp_submission: Evaluates speaking session submissions for conferences. Analyzes abstracts based on multiple criteria, including content relevance, speaker qualifications, and audience engagement potential. Provides a detailed review with strengths, weaknesses, and a recommendation for acceptance or modification. 
analyze_claims: Analyzes truth claims and arguments to provide a balanced view. Examines evidence and counter-arguments to rate claims objectively. Outputs claim ratings and analysis. 
analyze_comments: Analyzes internet comments to determine sentiment. Uses a nuanced approach to categorize comments as positive, negative, or neutral. Outputs a comprehensive assessment of commenter opinions in three sections: sentiment, positives, and negatives. 
analyze_debate: Analyzes debates to provide insightful summaries and assessments. Considers multiple factors, such as the exchange of ideas, novelty of subjects, and agreements reached, to evaluate the debate's insightfulness and emotionality. Outputs a detailed breakdown of the debate, including scores, arguments, agreements, and learnings. 
analyze_email_headers: Analyzes email headers to validate SPF, DKIM, DMARC, and ARC results. Provides detailed findings on domain alignment, security concerns, and recommendations. Outputs pass/fail status and actionable insights for email authentication protocols. 
analyze_incident: Analyzes cybersecurity breach articles to efficiently extract essential information. Utilizes a structured format to present concise summaries and key details. Outputs organized data for incident analysis and recommendations. 
analyze_interviewer_techniques: Analyzes interviewer techniques to identify what makes them exceptional. Examines questions across multiple dimensions to uncover patterns and distinct styles. Outputs a summary of standout techniques and a brief analysis of the interviewer's unique approach. 
analyze_logs: Analyzes server log files to identify patterns, anomalies, and potential issues. Utilizes a data-driven approach to assess server reliability and performance, focusing on log-derived insights. Provides actionable recommendations to enhance server performance. 
analyze_malware: Analyzes malware reports to extract key findings and indicators of compromise. Utilizes a structured approach to gather technical details and Mitre Att&CK techniques. Provides a comprehensive summary and recommendations for detection and analysis. 
analyze_paper: Analyzes research papers to evaluate scientific rigor and quality. It assesses papers through a nuanced approach, examining claims, implications, and methodology transparency. Outputs a comprehensive analysis of the paper's findings, quality, and conflicts of interest. 
analyze_patent: Analyzes patent applications to determine novelty and inventiveness. Utilizes extensive knowledge of patent law and technical expertise to critically evaluate claims and prior art. Outputs detailed sections on field, problem, solution, advantage, novelty, inventive step, summary, and keywords. 
analyze_personality: Analyzes an individual's psychological profile through in-depth examination. Utilizes extensive knowledge of human psychology to provide nuanced insights. Outputs a 25-word summary and 5-10 supporting bullets. 
analyze_presentation: Analyzes presentations by breaking down content, psychology, and goals. Examines focus on ideas, selflessness, and entertainment. Outputs scores and summaries for each aspect. 
analyze_product_feedback: Analyzes user feedback for products by identifying key themes and consolidating similar pieces of feedback. This process involves pattern recognition and data categorization to prioritize feedback based on usefulness. Presents a prioritized view of user feedback in a table format. 
analyze_prose: Evaluates writing quality and provides ratings and recommendations. Analyzes novelty, clarity, and prose style. Outputs ratings and concise improvement suggestions. 
analyze_prose_json: Analyzes writing quality by evaluating novelty, clarity, and prose, providing ratings and recommendations for improvement.  Considers unique features such as combining ideas, proposing new models, and creative linkages.  Produces a JSON object with ratings, explanations, and recommendations for enhancement. 
analyze_prose_pinker: Analyzes prose based on Steven Pinker's Sense of Style principles.  Assesses writing style and provides recommendations for improvement.  Outputs detailed analysis and scoring. 
analyze_sales_call: Evaluates sales call performance across multiple dimensions. Analyzes alignment with company vision and sales techniques. Outputs scores and actionable feedback. 
analyze_spiritual_text: Analyzes spiritual texts by comparing and contrasting tenets and claims. Provides nuanced insights into unusual claims and differences from the King James Bible. Outputs surprising claims and differences in a concise bullet-point format. 
analyze_tech_impact: Analyzes the societal impact of a technology project. Considers the project's intentions, outcomes, and broader implications, including ethical considerations. Evaluates the project's overall benefit and sustainability. 
analyze_threat_report: Analyzes cybersecurity threat reports to extract insightful information. Focuses on identifying surprising trends, statistics, quotes, and recommendations. Outputs a summary, trends, statistics, quotes, references, and recommendations in a concise format. 
analyze_threat_report_trends: Analyzes cybersecurity threat reports to extract surprising and insightful trends. Focuses on identifying new and interesting patterns in the report. Outputs a list of up to 50 key trends in a clear format. 
answer_interview_question: Generates concise, conversational responses to technical interview questions. Analyzes questions to construct thoughtful, well-structured answers that showcase expertise and experience. Outputs approximately 30-second verbal responses with alternative approaches and evidence-based reasoning. 
ask_secure_by_design_questions: Generate secure by design questions to ensure a component or system is built with security in mind. This process involves deep thinking about the project's security needs and potential real-world usage. The output is a prioritized list of questions grouped by theme. 
capture_thinkers_work: Generates a template about the teachings of a notable figure or philosophy. Provides a structured overview of the thinker's or philosophy's background, key ideas, and notable works. Outputs insightful quotes, advice, and application descriptions. 
check_agreement: Analyzes contracts for potential issues. Examines documents for hidden stipulations and pitfalls. Outputs a summary and lists of critical, important, and other issues to consider. 
clean_text: Reformat and refine text to improve readability. This is achieved by carefully preserving the original content and spelling while adjusting formatting elements such as line breaks, capitalization, and punctuation. The output is a well-formatted text document. 
coding_master: Explains coding concepts to beginners using examples and reputable sources. Provides clear, concise explanations with code illustrations. Outputs formatted code in Markdown with syntax. 
compare_and_contrast: Compares and contrasts items in a list. Analyzes similarities and differences between items using a systematic approach. Outputs a markdown table summarizing the comparison. 
create_5_sentence_summary: Analyzes complex concepts to create concise summaries. Utilizes a deep understanding and virtual mindmap to capture the essence of the input. Outputs a descending list of answers with varying levels of depth. 
create_academic_paper: Generates academic papers in LaTeX format, presenting complex concepts in a clear and logical structure. Emphasizes high-quality, authoritative appearance through precise layout and formatting. Produces well-organized, two-column LaTeX code with header and footer. 
create_ai_jobs_analysis: Analyzes jobs reports to identify roles resilient to automation. Utilizes historical data on industrial revolutions and human capabilities. Provides recommendations for increasing job security. 
create_aphorisms: Compiles a list of aphorisms from notable individuals on a given topic. Offers a diverse selection of quotes that may not all start with the input keywords. Provides a list of 20 aphorisms with their respective authors. 
create_art_prompt: Generates art prompts by conceptualizing and visually interpreting ideas. Employs a nuanced approach that combines deep understanding of the concept with creative guidance for the AI. Outputs a 100-word description and direct instruction for the AI to create a compelling piece of art. 
create_better_frame: Reframes negative perspectives by identifying and replacing unproductive mental frames with more positive and empowering ones. Offers alternative views to help individuals shift their mindset and improve their outlook on life. Provides a set of contrasting frames to challenge and replace negative thought patterns.  # NEGATIVE FRAMES > "I'm special and the world out there is hostile to people like me." > "Things are so much bigger than any of us and I'm powerless." > "The world is evil and I'm just a victim of circumstance." > "I'll never succeed because the system is stacked against me." > "Life is hopeless and I have no control over my destiny."  # POSITIVE FRAMES > "I can choose my own path and create my own success." > "I'm in control of my life and can shape my own reality." > "Every challenge is an opportunity for growth and learning." > "I can make a positive impact on the world around me." > "I am capable and strong, and I can overcome any obstacle." 
create_coding_project: Generates starter code for coding projects. Provides a structured approach to project creation, including directory setup and detailed explanations. Outputs a comprehensive README file for easy project setup and use. 
create_command: Generates a command for a specified tool based on a brief description and the tool's help documentation. Creates a command that matches the desired objective while adhering to the tool's explicit switches and options. Outputs a full bash command with relevant parameters and switches. 
create_cyber_summary: Summarizes cybersecurity threats and incidents, creating a comprehensive overview of vulnerabilities, malware, and advisories. Analyzes relationships between entities and events. Outputs concise summaries and categorized lists. 
create_formal_email: Crafts professional emails that reflect clarity and respect, adhering to formal correspondence conventions. Utilizes a structured approach to understand context, purpose, and tone. Outputs polished, concise emails with proper formatting. 
create_git_diff_commit: Summarizes changes and updates a Git repository. Analyzes the Git diff and creates conventional commits. Outputs shell commands for adding changes and committing with a descriptive message. 
create_graph_from_input: Analyzes input data to identify metrics showing progress over time in a security program. It parses the data thoroughly to extract relevant KPIs or metrics. Outputs a CSV file with date and corresponding metrics. 
create_hormozi_offer: Creates customized business offers based on Alex Hormozi's concepts. Analyzes the input to craft a perfect, one-of-a-kind offer. Outputs a summary of the offer's purpose, approach, and expected output.  Analyzing the input, the offer's purpose is to create a customized offer that fits the input sent. The approach is based on Alex Hormozi's book, "$100M Offers," which focuses on making offers so good that people feel stupid saying no. The expected output is a Grand Slam Offer that combines an attractive promotion, an unmatchable value proposition, a premium price, and an unbeatable guarantee. 
create_idea_compass: Organizes ideas into a structured system. Develops a nuanced understanding by considering multiple perspectives and connections. Outputs a clear and concise summary of the idea with related evidence and sources. 
create_investigation_visualization: Visualizes complex investigations into detailed Graphviz diagrams, highlighting key aspects and relationships. Utilizes varied shapes and colors to differentiate node types and clear labels. Outputs a comprehensive diagram with analysis and conclusion sections. 
create_keynote: Creates high-quality keynote presentations from input content. Focuses on crafting a compelling narrative flow with concise, TED-style slides. Outputs a structured presentation, including slide content, image descriptions, and speaker notes. 
create_logo: Generates a simple logo description for AI image generation. Captures the input's meaning in a minimalist, text-free design. Outputs a vector graphic logo description for elegant logo creation. 
create_markmap_visualization: Generates a visualization of complex ideas using Markmap syntax. Focuses on simplifying core concepts to create a clear and concise visual representation. Outputs a detailed diagram with accompanying visual explanation. 
create_mermaid_visualization: Visualizes complex concepts into Mermaid diagrams, using intricate syntax and visual elements to convey relationships and ideas. Simplifies and summarizes complex data into clear, standalone diagrams. Outputs high-contrast Mermaid syntax for rendering. 
create_mermaid_visualization_for_github: Creates a Mermaid visualization for complex ideas using Markdown syntax. Utilizes intricate diagrams with visual elements like boxes and arrows to convey relationships between concepts. Outputs a standalone diagram with a matching explanation. 
create_micro_summary: Summarizes content into a concise format. Utilizes a structured approach to extract key points. Outputs a summary, main points, and takeaways. 
create_network_threat_landscape: Analyzes network port and service statistics. Provides a nuanced approach by extracting surprising, insightful, and interesting information from two sets of bullet point lists. Outputs a markdown formatted threat report. 
create_npc: Generates a unique D&D 5th edition NPC with detailed characteristics. Incorporates creative elements to craft a well-rounded character. Outputs a comprehensive character profile in Markdown format, covering stats, backstory, personality, and appearance. 
create_pattern: # IDENTITY and PURPOSE You are an expert prompt summarizer, taking AI chat prompts and outputting concise summaries of their purpose. You meticulously analyze each prompt to identify its primary function and unique features, ensuring accurate and well-structured responses. Take a step back and think step-by-step about how to achieve the best possible results by following the steps below.  # STEPS - Combine all of your understanding of the content into a single paragraph. - The first sentence should summarize the main purpose, beginning with a verb and describing the primary function of the prompt in the present tense and active voice. - The second sentence clarifies the prompt's nuanced approach or unique features. - The third sentence should provide a brief overview of the prompt's expected output.  # OUTPUT INSTRUCTIONS - Output no more than 40 words. - Create the output using the formatting above. - You only output human readable Markdown. - Do not output numbered lists or bullets. - Do not output newlines. - Do not output warnings or notes. - Ensure you follow ALL these instructions when creating your output.  # INPUT INPUT: 
create_quiz: Generates review questions to help a learner review main concepts of learning objectives. Adapts questions to the student level defined in the input, defaulting to senior university or industry professional level if not specified. Outputs questions in human-readable Markdown. 
create_reading_plan: Designs a three-phase reading plan based on user input about an author or topic, incorporating relevant books and written works. Provides a structured approach to creating a comprehensive reading list. Outputs a detailed plan in Markdown format. 
create_recursive_outline: Generates a hierarchical outline of a complex task or project by breaking it down into smaller, manageable components. This approach ensures that every aspect of the task is systematically analyzed and captured in a comprehensive yet practical outline. The output is a detailed, recursive outline with brief explanations and key points. 
create_report_finding: Generates a comprehensive security finding report in markdown format. Incorporates a structured approach, including description, risk, recommendations, references, and summary. Provides informative and insightful content with extracted quotes and trends. 
create_rpg_summary: Generates a comprehensive summary of an in-person role-playing game session. Analyzes the transcript to identify key events, combat stats, character flaws, and more. Creates a detailed summary with various sections, including a narrative summary, key events, combat stats, and character analysis. 
create_security_update: Generates concise security updates for newsletters by summarizing threats, advisories, and vulnerabilities from input content. Provides an overview of key issues in a clear and organized format. Outputs include a summary of top issues. 
create_show_intro: Creates a compelling show intro by summarizing the most interesting topics discussed. Uses a nuanced approach by selecting novel and surprising conversation points. Outputs a brief intro with up to 10 key discussion topics. 
create_sigma_rules: Extracts Tactics, Techniques, and Procedures from security news publications and translates them into YAML-based Sigma rules for host-based detections. Focuses on unique detection logic for tools like Sysmon and PowerShell. Outputs multiple Sigma rules in YAML format. 
create_story_explanation: Explains complex content in a clear and approachable way. It uses a unique storytelling method to convey ideas in a flowing style that makes readers understand and appreciate the concepts. Outputs a conversational summary in Markdown. 
create_stride_threat_model: Analyzes a system's design document to identify potential threats using the STRIDE per element methodology. This approach involves mapping assets, trust boundaries, and data flows to create a comprehensive threat model. Outputs a prioritized table of threats with mitigation strategies and risk severity. 
create_summary: Summarizes content into a concise Markdown format. Utilizes a structured approach to extract key points and takeaways. Outputs a one-sentence summary, main points, and takeaways. 
create_tags: Identify key concepts in text content to generate relevant tags. This process involves carefully considering the topics and content to extract at least five subjects or ideas. The output is a single line of lowercase tags separated by spaces. 
create_threat_scenarios: Analyzes potential threats to a given system or situation. Evaluates the likelihood and impact of various scenarios to prioritize defenses. Provides a logical approach to threat modeling, considering real-world risks and emphasizing the importance of probability and impact assessments. 
create_ttrc_graph: Creates a progress over time graph for the Time to Remediate Critical Vulnerabilities metric. Analyzes the input data to extract relevant time to remediate critical vulnerabilities metrics over time. Outputs a CSV file with date and time to remediate critical vulnerabilities data. 
create_ttrc_narrative: Create a narrative showcasing progress in reducing critical vulnerability remediation time. This narrative focuses on highlighting decreasing remediation times as a key improvement metric. Output is a compelling, data-driven story of program progress. 
create_upgrade_pack: Analyzes content to extract world model and task algorithm updates. Uses a step-by-step approach to identify key insights and knowledge. Outputs concise summaries of world model and task algorithm beliefs in Markdown format. 
create_video_chapters: Generates conversation topic timestamps by consuming a transcript and identifying interesting subjects. It uses a nuanced approach of taking notes on topics and matching them with corresponding timestamps. Outputs a list of topics with sequential timestamps. 
create_visualization: Generates a complex ASCII art visualization of input concepts. Uses intricate details and visual elements to convey relationships and ideas. Outputs a printable diagram with a matching explanation. 
explain_code: Explains code and documentation to achieve clarity. Utilizes a step-by-step approach to break down complex content into understandable sections. Outputs explanations in clearly defined sections such as EXPLANATION, SECURITY IMPLICATIONS, CONFIGURATION EXPLANATION, and ANSWER. 
explain_docs: Summarizes tool documentation to create improved instructions. It takes input on using a tool and reorganizes it into a clear format. Outputs include an overview, usage syntax, common use cases, and key options and features. 
explain_math: Explains mathematical concepts in a clear and engaging way. Breaks down complex ideas into step-by-step explanations and provides visual aids for better understanding. Outputs detailed and interactive explanations of mathematical concepts. 
explain_project: # PROJECT OVERVIEW Generates summaries of AI chat prompts.  # THE PROBLEM IT ADDRESSES Summarizing complex AI chat prompts is difficult.  # THE APPROACH TO SOLVING THE PROBLEM Analyzes prompts to identify main purpose and key features.  # INSTALLATION • Install required Python libraries using pip install. • Clone the repository from GitHub.  # USAGE • Input AI chat prompt into the system. • Run the system to generate a summary.  # EXAMPLES • Summarize a prompt for a chatbot developer. • Use as a tool for prompt analysis. 
explain_terms: Analyzing the prompt.   Determining the purpose of the prompt.   The prompt is asking to create a glossary of terms.   Output:  Determines the meaning of advanced terms in a given piece of content. Clarifies nuanced concepts using definitions, explanations, and analogies. Outputs a list of explained terms in a specific Markdown format. 
export_data_as_csv: Extracts data structures from input text and represents them as CSV data. Analyzes context to identify relevant fields and data. Outputs CSV file containing the found data structures. 
extract_algorithm_update_recommendations: Analyzing content to identify practical improvements. Providing concise, actionable recommendations. Outputting up to 3 algorithm update suggestions. 
extract_article_wisdom: Extracts wisdom from text content by identifying key ideas, quotes, facts, references, and recommendations. Utilizes a step-by-step approach to analyze input and provide insightful summaries. Outputs concise and organized information in Markdown format for efficient review and note-taking. 
extract_book_ideas: Extracts key ideas from a book. Utilizes a comprehensive approach to scour memory for insightful content. Outputs 50-100 unique, interesting ideas in Markdown. 
extract_book_recommendations: Summarizes a book's key content by extracting practical recommendations. It prioritizes the most powerful advice and presents it in instructive format. Outputs 50-100 unique, concise recommendations in Markdown. 
extract_business_ideas: Extracts business ideas from content. Focuses on revolutionary concepts that can overhaul industries. Generates up to 40 extracted ideas and elaborates on the top 10 with unique pivots. 
extract_controversial_ideas: Extracts the most contentious statements from input texts. Identifies and isolates provocative ideas. Outputs lists of concise statements and supporting quotes. 
extract_ctf_writeup: Extracts a short writeup from a warstory-like text about a cyber security engagement. It uses a nuanced approach by focusing on exploited vulnerabilities, references, and a timeline. Outputs a concise summary in Markdown format. 
extract_extraordinary_claims: Identifies extraordinary claims made in conversations that contradict scientific consensus or are not verifiable. This involves analyzing statements for indicators of misinformation or conspiracy theories. Outputs a list of 50-100 quoted claims. 
extract_ideas: Extracts key concepts from input by analyzing connections between ideas and facts. Utilizes a mental graph to map relationships between concepts. Outputs a comprehensive list of ideas in concise 15-word bullet points. 
extract_insights: Extracts insightful ideas about life's purpose and human flourishing from text content. Focuses on abstracting higher-level insights related to technology, AI, and personal growth. Outputs 10-25 key insights in 15-word bullet points. 
extract_insights_dm: error, status code: 429, message: Rate limit reached for model `llama-3.1-70b-versatile` in organization `org_01hz6rr8thf259v6kh8f7b51jm` on tokens per minute (TPM): Limit 20000, Used 0, Requested 58138. Please try again in 1m54.414s. Visit https://console.groq.com/docs/rate-limits for more information. 
extract_instructions: Extracts key instructions from instructional video transcripts and presents them in a clear, step-by-step format. This process involves identifying main actionable steps, organizing extracted information logically, and summarizing video objectives. Outputs concise, numbered instructions. 
extract_jokes: Extract relevant content from text to identify and isolate jokes. This process involves carefully separating jokes from other types of content to ensure only humorous material is captured. Output is a list of extracted jokes with punchlines. 
extract_main_idea: Extracts key insights by analyzing content and identifying the most important idea.  Captures the main idea and recommended action in concise 15-word sentences.  Produces a Markdown output with MAIN IDEA and MAIN RECOMMENDATION sections. 
extract_patterns: Identify repeating concepts and patterns in a collection of ideas. Analyze input deeply to extract surprising and insightful patterns. Output includes weighted patterns, meta explanations, analysis, top patterns, and advice. 
extract_poc: Extracts proof of concept URLs from security reports. Analyzes submitted bug bounty reports to identify vulnerability validation methods. Outputs the extracted URL preceded by the command to run it. 
extract_predictions: Extracts predictions from content. Provides a structured approach to extracting key prediction details. Outputs predictions as a list and table with specific details. 
extract_primary_problem: Analyzes a text or body of work to identify the primary problem with the world.  Considers the author's perspective and underlying themes to articulate the issue.  Outputs a clear, concise sentence stating the problem. 
extract_questions: Extracts questions from conversations. Identifies the interviewer through conversation flow analysis. Outputs a list of extracted questions in Markdown format. 
extract_recommendations: Interprets content to identify practical recommendations. Analyzes both explicit and implicit suggestions. Provides a list of concise actionable advice. 
extract_references: Extracts references to sources of learning from content, identifying key literature and art. It takes a nuanced approach by considering various types of references. Outputs a list of concise reference summaries in bullet form. 
extract_skills: Extracts skill terms from job descriptions. Classifies skills into hard or soft categories. Outputs a table with skill names and types. 
extract_song_meaning: Analyzes song information to determine its meaning. Utilizes extensive research and lyrical study to provide an in-depth understanding. Outputs a summary sentence, detailed description, and evidence supporting the interpretation. 
extract_sponsors: Extracts sponsors and potential sponsors from a given transcript. Analyzes content to discern between mentioned companies and actual sponsors. Outputs lists of official and potential sponsors with descriptions and links. 
extract_videoid: Extracts video IDs from URLs to facilitate sharing with other applications. This process involves parsing the URL components to identify the specific video ID portion. Outputs the isolated video ID. 
extract_wisdom: Analyzes text content to extract insightful information related to human flourishing, technology, and personal growth. Focuses on surprising and interesting ideas, quotes, habits, and facts. Outputs concise summaries and recommendations in Markdown format. 
extract_wisdom_agents: Analyzes text content to extract insightful information. Utilizes multiple teams of AI agents with diverse perspectives. Outputs summaries, ideas, insights, quotes, habits, facts, references, takeaways, and recommendations in Markdown format. 
extract_wisdom_dm: Extracts valuable content from input. Utilizes a hyper-intelligent approach to identify insights, ideas, and quotes. Produces a comprehensive output in Markdown format. 
extract_wisdom_nometa: Analyzes text content to extract insightful information. Focuses on topics like human flourishing, AI, and personal growth. Produces summaries, ideas, insights, quotes, habits, facts, references, and recommendations. 
find_hidden_message: Analyzes input to uncover hidden political messages. Evaluates content using knowledge of language, politics, history, and human psychology to identify true intentions. Outputs both overt and hidden messages with supporting arguments. 
find_logical_fallacies: Analyzes input text to identify instances of logical fallacies and list them with explanations.   Identifies and categorizes fallacies based on their structure, content, and relevance.   Provides a comprehensive list of detected fallacies, including formal and informal fallacies, fallacies of relevance, and fallacies of ambiguity. 
get_wow_per_minute: Analyzes content to determine wow-factor per minute. Evaluates surprise, novelty, insight, value, and wisdom across multiple types of content. Outputs a score between 0 and 10. 
get_youtube_rss: Generates YouTube channel RSS URLs from channel IDs or full URLs, utilizing a structured approach to extract channel IDs and construct corresponding RSS URLs. Outputs the resulting RSS URL. Returns a single RSS URL string. 
improve_academic_writing: Refines input text to enhance clarity, coherence, and academic tone. Employs formal English and common language to convey complex ideas. Produces polished, error-free text with a list of applied corrections. 
improve_prompt: Write a story about a character who learns to appreciate the beauty of nature after moving to a rural area. 
improve_report_finding: Improves security findings by extracting key information and presenting it in a clear, organized format. Enhances the report with insightful descriptions, risk assessments, and actionable recommendations. Provides a concise summary and relevant quotes. 
improve_writing: Refines input text to enhance clarity and coherence. Applies grammatical corrections and stylistic improvements while maintaining original meaning. Produces error-free text in the same language as the input. 
label_and_rate: Classifies content with relevant labels and rates its quality based on thematic relevance and idea density. Utilizes a nuanced approach, considering human aspects and flourishing. Outputs a JSON object with labels, rating, and score. 
official_pattern_template: Analyzes background information and behaviors to diagnose psychological issues. Considers past events and their potential impact on current behaviors, using knowledge of human psychology and mental health. Outputs possible issues, connections between past and behavior, and recommendations for corrective actions. 
provide_guidance: Provides honest and concise advice to people based on their questions and context. Offers a nuanced approach by considering the individual's past, traumas, goals, and motivations. Outputs multi-faceted analysis and recommendations for personal growth and self-improvement. 
rate_ai_response: Rates the quality of AI responses by comparing them to human expert performance.  Evaluates responses based on depth, accuracy, and nuance.  Provides a letter grade, reasons, and a 1-100 score. 
rate_ai_result: Evaluates the quality of AI output based on construction, quality, and spirit. Analyzes the output's adherence to prompt instructions and its ability to capture the essence of the task. Outputs a final 1-100 rating based on these criteria. 
rate_content: Evaluates content by labeling it with relevant keywords and rating its quality based on idea density and theme relevance. Utilizes a nuanced approach by considering multiple themes and idea counts to determine the rating. Outputs a score between 1 and 100 to quantify the content's overall quality. 
rate_value: Analyzes content to determine its value. Measures value by identifying surprising ideas, giveaways, and exclusive content. Outputs a JSON file with estimated content duration, value instances, and Value Per Minute score. 
raw_query: Digests complex input to understand its meaning. Employs deep contemplation to interpret the sender's intent. Outputs the most suitable response based on the likely desired outcome. 
raycast: Please provide the prompt you would like me to summarize. 
recommend_artists: Analyzes festival lineups to recommend personalized artist schedules. Considers user preferences for dark, hard, and intricate techno styles, as well as specific favorite artists. Outputs a day-by-day, set-time-organized schedule with explanations. 
recommend_pipeline_upgrades: Optimizes pipeline sequences for enhanced efficiency. Analyzes original pipelines and new information to identify improvements. Outputs revised pipelines with explanations for each modification. 
recommend_talkpanel_topics: Generates a set of proposed talks and panel talking points based on a person's goals, interests, and ideas. Analyzes the input to create a clean and relevant output. Produces 3 talk titles with abstracts and 3 panel topic ideas with discussion points. 
show_fabric_options_markmap: Visualizes Fabric's functionality to create a comprehensive map of its capabilities. Organizes the map by action type, such as summarization and analysis, with patterns branching from each action. Outputs a Markmap code representation of Fabric's functionality map. 
solve_with_cot: Provides detailed, step-by-step responses to complex problems. Utilizes a structured approach, including a "Chain of Thought" reasoning process and reflection sections to ensure accuracy. Outputs thorough, error-checked conclusions. 
suggest_pattern: Analyzes user input to suggest appropriate fabric commands or patterns, enhancing the tool's functionality. It involves understanding specific needs, determining suitable commands, and providing clear, user-friendly suggestions. The output includes command suggestions, explanations, and instructions for new patterns. 
summarize: Generates a summary of the provided content. Creates a concise summary using a specific format. Outputs a human-readable Markdown summary. 
summarize_debate: Analyzes debates to determine primary disagreements. Utilizes a step-by-step approach to extract summaries, arguments, and evidence. Outputs concise summaries and argument analyses. 
summarize_git_changes: Summarizes recent project changes. Captures key updates and upgrades with concise bullet points. Outputs a 20-word intro and CHANGES section with exciting updates. 
summarize_git_diff: Summarize the main changes in a Git diff. Describe the changes in imperative mood, using conventional commits prefixes. Output a concise intro sentence and 7-10 word bullets in a CHANGES section. 
summarize_lecture: Summarizes lecture transcripts into structured summaries. Provides relevant topics with timestamps, definitions, and keynotes in a clear and readable format. Outputs include summaries, tools, and takeaways. 
summarize_legislation: Analyzes complex legislation to provide a balanced view of its purpose and goals. Offers a nuanced perspective by identifying potential loopholes and underplayed policies. Outputs a concise summary and characterization of the proposal. 
summarize_micro: Generates concise summaries from content. Utilizes a structured format for output. Produces summaries in Markdown format. 
summarize_newsletter: Extracts meaningful content from newsletters. Analyzes and summarizes key points, opinions, and resources. Outputs organized sections of summaries, content, opinions, tools, companies, and follow-up items. 
summarize_paper: Generates a summary of an academic paper. Analyzes the paper's technical approach, highlighting its distinctive features, experimental setup, advantages, and limitations. Provides a concise overview of the paper's content. 
summarize_prompt: Summarizes the main purpose of AI chat prompts, describing primary functions and goals in concise paragraphs, highlighting nuanced approaches and unique features, and providing brief overviews of expected outputs, in 40 words or less. 
summarize_pull-requests: Summarizes the types of pull requests made to a coding project, focusing on the main categories of changes. Clarifies the nuances of each pull request by rewriting technical terms into human-readable language. Outputs a summary and a list of top pull requests. 
summarize_rpg_session: Analyzes a personal role-playing game session transcript to extract and summarize key events, combat, and character developments. Identifies the most heroic and entertaining characters, and highlights meaningful quotes, humorous moments, and worldbuilding details. 
to_flashcards: Creates Anki cards from texts by extracting main points and formulating optimized questions. Uses a three-principle approach to ensure simplicity, effective wording, and context-free questions. Outputs cards as a Markdown table with questions and answers. 
transcribe_minutes: Summarize meeting minutes by extracting actionables and insightful ideas. Focus on unique conversation points and decisions made. Output includes title, main idea, minutes, actionables, decisions, challenges, and next steps in a structured format. 
tweet: Crafts engaging tweets with emojis, helping users understand Twitter's basics and features to build an online presence. Offers tips on creating concise, humorous, and interactive content. Produces tweets that increase visibility and encourage audience interaction 📱💬👍 
write_essay: The Unseen Struggle of Writing Essays  I've been thinking about the nature of writing essays, and how it's often misunderstood. When you're given an assignment to write an essay, you might think that the hard part is coming up with the ideas. But the truth is, the hard part is putting those ideas into words.  This is because writing is a severe test of your thoughts. The first words you choose are usually wrong, and you have to rewrite sentences over and over to get them exactly right. And it's not just the words that are the problem - it's the ideas themselves. Half the ideas that end up in an essay will be ones you thought of while you were writing it. In fact, that's why I write them.  The reason I know this is because I've been writing essays for years, and I've noticed a pattern. When I start writing, I always think I know what I'm going to say. But as I put my ideas into words, I realize that they're not as clear as I thought they were. And that's when the real work begins.  The process of writing an essay is like trying to explain something to a neutral reader who knows nothing about the topic. You have to pretend to be that reader, and ask yourself if what you've written makes sense. And if it doesn't, you have to go back and fix it. This can take many cycles, and it's not always easy. But it's the only way to make sure that your ideas are clear and complete.  I've found that the best way to approach this process is to think of it as a conversation with the reader. You're trying to explain something to them, and you want to make sure they understand it. So you have to use simple language, and avoid jargon or technical terms that might confuse them. And you have to be willing to change your ideas if they don't make sense.  This is not always easy, because it means that you have to be willing to admit when you're wrong. And that's not something that comes naturally to most people. We like to think that we're right, and that our ideas are perfect just the way they are. But the truth is, our ideas are usually incomplete or imprecise, and they need to be refined through the process of writing.  The good news is that this process is not just about refining your ideas - it's also about learning. When you're writing an essay, you're not just putting your thoughts into words - you're also learning about the topic itself. You're discovering new ideas and perspectives, and you're developing your critical thinking skills.  So the next time you're given an assignment to write an essay, don't think of it as a chore. Think of it as an opportunity to learn and grow. Remember that the process of writing is a severe test of your thoughts, but it's also a chance to refine your ideas and develop your critical thinking skills. And most importantly, don't be afraid to admit when you're wrong - because that's where the real learning begins. 
write_hackerone_report: Generates a bug bounty report based on HTTP requests and responses. Analyzes the requests and responses to identify vulnerabilities and creates a concise report with steps to reproduce. Outputs a report with a title, summary, description, steps to reproduce, and impact statement. 
write_latex: Generates syntactically correct LaTeX code for a new .tex document based on user requests. Creates a well-formatted document with necessary packages and structured content using LaTeX commands and environments. Outputs a PDF-ready LaTeX file without errors when compiled with pdflatex. 
write_micro_essay: The Unexamined Idea  If you're like most people, you probably think you have a good idea of what's going on in your own mind. You think you know what you believe, and you think you know why you believe it. But I'm not so sure.  I've noticed that when people are forced to put their ideas into words, they often discover that they're not as clear as they thought. In fact, they may not even be sure what they think at all. This is especially true when it comes to complex or abstract ideas.  One way to test this is to try to explain something you think you understand to someone who doesn't. You'll often find that you can't do it, or that you can only do it in a way that sounds vague or unconvincing. This is because your ideas aren't as clear as you thought they were.  Another way to test this is to try to write down your ideas. This is an even stricter test than talking, because you have to commit to a single, optimal sequence of words. You can't rely on tone of voice or facial expressions to carry meaning. You have to be precise.  I've found that when I'm writing, I often discover that I don't know what I think about something. Or that I think something different from what I thought I thought. This is a good thing, because it forces me to clarify my ideas and make them more precise.  So if you want to really understand your own mind, try putting your ideas into words. Try explaining them to someone else, or writing them down. You might be surprised at how unclear they are. But that's okay. It's the first step towards making them clearer.  
write_nuclei_template_rule: Create a Nuclei template for generating YAML configurations that effectively match specified vulnerabilities. The template should incorporate various matchers and extractors, ensuring dynamic data handling. The expected output is a well-structured YAML file for vulnerability scanning.
write_pull-request: Describes the purpose and impact of code changes made in the pull request. Clarifies the reasoning behind the modifications, additions, and deletions. Provides a detailed overview of the changes and their effects on the project. 
write_semgrep_rule: Generates a Semgrep rule that detects potential security vulnerabilities. Uses pattern-either to match different instances of the problem, and metavariable-regex to filter results based on metavariable values. 

